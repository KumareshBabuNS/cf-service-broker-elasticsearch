heat_template_version: 2016-04-08
description: Deployment Description for Elasticsearch-Cluster Node (Script 4/4)

parameters:

  image_id:
    type: string
    description: Image used for servers
  key_name:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the servers
  availability_zone:
    type: string
    description: Availability Zone of the nodes.
  node_hostname:
    type: string
    description: Hostname of the node.

  node_volume_id:
    type: string
    description: ID of the pre-created volume to be attached to the node 0.
  node_port:
    type: string
    description: Port-ID of the pre-created Port for the node 0.

  cluster_name:
    type: string
    description: Name of the elasticsearch cluster.

  discovery_ip_1:
    type: string
    description: IP of one of the other nodes for zen-discovery (node0_ip, node1_ip or node2_ip).
  discovery_ip_2:
    type: string
    description: IP of one of the other nodes for zen-discovery (node0_ip, node1_ip or node2_ip).


resources:

  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_param: node_volume_id }
      instance_uuid: { get_resource: instance }
      mountpoint: /dev/vdb

  instance:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image_id }
      availability_zone: { get_param: availability_zone }
      key_name: { get_param: key_name }
      name: { get_param: node_hostname }
      networks:
      - port: { get_param: node_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash

            mkdir -p /data
            echo "/dev/vdb       /data       ext4    defaults     0 0" >> /etc/fstab
            mkfs.ext4 /dev/vdb
            mount -a

            export CLUSTER_NAME="$cluster_name"
            export DISCOVERY_IP_1="$discovery_ip_1"
            export DISCOVERY_IP_2="$discovery_ip_2"
            export HOSTNAME="$hostname"


            export REPOSITORY_ELASTICSEARCH="https://bitbucket.org/meshstack/deployment-scripts-elasticsearch/raw/HEAD/elasticsearch/ubuntu_16_04"
            export REPOSITORY_ELASTICSEARCH_CLUSTER="https://bitbucket.org/meshstack/deployment-scripts-elasticsearch/raw/HEAD/elasticsearch/ubuntu_16_04/cluster"

            wget $REPOSITORY_ELASTICSEARCH/elasticsearch-template.sh --no-cache
            wget $REPOSITORY_ELASTICSEARCH_CLUSTER/elasticsearch-cluster-template.sh --no-cache


            chmod +x elasticsearch-template.sh
            chmod +x elasticsearch-cluster-template.sh

            ./elasticsearch-template.sh -e openstack

            ./elasticsearch-cluster-template.sh -e openstack

            wc_notify --data-binary '{"status": "SUCCESS"}'

          params:
            $cluster_name: { get_param: cluster_name}
            $discovery_ip_1: { get_param: discovery_ip_1}
            $discovery_ip_2: { get_param: discovery_ip_2}
            $hostname: { get_param: node_hostname}

            wc_notify: { get_attr: [  'wait_handle', 'curl_cli'] }

  wait_handle:
    type: OS::Heat::WaitConditionHandle
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 600
  wait_for_it:
    type: OS::Heat::None
    depends_on: wait_condition
